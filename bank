#include <iostream>
#include <vector>
#include <stdexcept> // For exception handling
using namespace std;
class insfficientbalnace : public exception{
    public:
    string what (){
        return "insufficient balance for the transaction";
    }
};
class bank {
private:
    int accno;
    int balance;
    string userid;
    string pass;
public:
    bank(string userid, string pass, int accno, int balance) {
        this->userid = userid;
        this->pass = pass;
        this->accno = accno;
        this->balance = balance;
    }
    void getdetails() {
        cout << "User ID = " << this->userid << endl;
        cout << "Account No = " << this->accno << endl;
        cout << "Balance = " << this->balance << endl;
    }
    string getUserid() { return userid; }
    string getPass() { return pass; }
    int getBalance() { return balance; }

    // Transfer money function
    void transferMoney(int amount) {
        if (amount <= 0) {
            cout << "Invalid amount. Transaction failed.\n";
            return;
        }
        if (balance < amount) {
            insfficientbalnace e;
            throw e.what();
        }
        else {
            balance  -= amount;
            cout<<amount<<" transfer successfully"<<endl;
        }
    }
    void add(int amount){
        balance += amount;
    }
    int getaccno(){
        return accno;
    }
};
int main() {
    vector<bank> v;
    int choice;

    do {
        cout << "\nEnter 1 to create an account\n"
             << "Enter 2 to login\n"
             << "Enter 3 to exit\n"
             << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            int accno, balance;
            string userid, pass, temp;
            cout << "Create your User ID: ";
            cin >> userid;
            cout << "Create your Password: ";
            cin >> pass;
            cout << "Confirm Password: ";
            cin >> temp;

            while (temp != pass) { 
                cout << "Passwords do not match. Try again.\n";
                cout << "Create your Password: ";
                cin >> pass;
                cout << "Confirm Password: ";
                cin >> temp;
            }
            cout << "Enter Account Number: ";
            cin >> accno;
            cout << "Enter Initial Balance: ";
            cin >> balance;
            bank obj(userid, pass, accno, balance);
            v.push_back(obj);
            cout << "Account created successfully!\n";
        } 
        else if (choice == 2) {
            string id, pass;
            cout << "Enter User ID: ";
            cin >> id;
            cout << "Enter Password: ";
            cin >> pass;
            int idx = -1;
            for (int i = 0; i < v.size(); i++) {
                if (v[i].getUserid() == id && v[i].getPass() == pass) {
                    idx = i;
                    break;
                }
            }
            if (idx == -1) {
                cout << "No account found.\n";
            } else {
                cout << "Login successful!\n";

                int c;
                do {
                    cout << "\nEnter 1 to show balance\n"
                         << "Enter 2 to transfer money\n"
                         << "Enter 3 to exit\n"
                         << "Enter your choice: ";
                    cin >> c;

                    if (c == 1) {
                        cout << "Your balance: " << v[idx].getBalance() << endl;
                    }
                    else if (c == 2) {
                        int amount;
                        cout << "Enter amount to transfer: ";
                        cin >> amount;
                        int temp;
                        cout<<"enter the account number of recever : ";
                        cin>>temp;
                        int recidx = -1;
                        for (int i = 0; i < v.size(); i++) {
                            if (v[i].getaccno() == temp) {
                                recidx = i;
                                break;
                            }
                        }
                        if (recidx==-1) cout<<"no reciver found"<<endl;
                        else {
                            v[idx].transferMoney(amount);
                            v[recidx].add(amount);
                        }
                    }

                } while (c != 3);
            }
        }
    } while (choice != 3);
    cout << "Exiting program...\n";
    return 0;
}
